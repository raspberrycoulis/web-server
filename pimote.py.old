#!/usr/bin/python
import os
import logging
from flask import Flask, render_template, Response, request
from functools import wraps
app = Flask(__name__)

log = logging.getLogger('werkzeug')
log.setLevel(logging.ERROR)

def check_auth(username, password):
  return username == 'thearchers' and password == 'ch8tt3ris'

def authenticate():
  return Response(
  'You do not have permission to view this page', 401,
  {'WWW-Authenticate': 'Basic realm="Login Required"'})

def requires_auth(f):
  @wraps(f)
  def decorated(*args, **kwargs):
      auth = request.authorization
      if not auth or not check_auth(auth.username, auth.password):
         return authenticate()
      return f(*args, **kwargs)
  return decorated

@app.route('/')
@requires_auth
def index():
  return render_template('lightson.html')

@app.route('/lightson/')
@requires_auth
def lights_on():
  os.system('python /home/pi/web-server/lights-on.py')
  return render_template('lightson.html')

@app.route('/lightsoff/')
@requires_auth
def lights_off():
  os.system('python /home/pi/web-server/lights-off.py')
  return render_template('lightson.html')

@app.route('/socket1-on/')
@requires_auth
def socket1_on():
  os.system('python /home/pi/web-server/socket1-on.py')
  return render_template('lightson.html')

@app.route('/socket1-off/')
@requires_auth
def socket1_off():
  os.system('python /home/pi/web-server/socket1-off.py')
  return render_template('lightson.html')

@app.route('/socket2-on/')
@requires_auth
def socket2_on():
  os.system('python /home/pi/web-server/socket2-on.py')
  return render_template('lightson.html')

@app.route('/socket2-off/')
@requires_auth
def socket2_off():
  os.system('python /home/pi/web-server/socket2-off.py')
  return render_template('lightson.html')

@app.route('/logout/')
def logout():
  return render_template('logout.html')

if __name__ == '__main__':
  app.run(host='0.0.0.0', port=9292, debug=False)
